name: CI MUMPS4PY (macOS)

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-test-macos:
    runs-on: macos-latest

    env:
      MUMPS_SOLVERS: dmumps,zmumps,smumps,cmumps
      MUMPS_INC: ${{ github.workspace }}/MUMPS_5.7.3/include
      MUMPS_LIB: ${{ github.workspace }}/MUMPS_5.7.3/lib
      LIBOMP_DIR: $(brew --prefix libomp)
      OPENBLAS_DIR: $(brew --prefix openblas)
      METIS_DIR: $(brew --prefix metis)

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install system packages + OpenMPI + libomp + gfortran
      run: |
        brew update
        brew install open-mpi openblas lapack cmake metis libomp gcc
        # Find the installed gfortran version
        GFORTRAN_PATH=$(find $(brew --prefix gcc)/bin -name 'gfortran-*' | head -n 1)
        if [ -z "$GFORTRAN_PATH" ]; then
          echo "Error: gfortran not found after installing gcc"
          exit 1
        fi
        GFORTRAN_BIN=$(basename $GFORTRAN_PATH)
        echo "Found gfortran: $GFORTRAN_BIN"
        # Verify gfortran works
        $GFORTRAN_BIN --version
        # Add gcc bin directory to PATH
        echo "$(brew --prefix gcc)/bin" >> $GITHUB_PATH
        # Verify PATH update
        echo "PATH after update: $PATH"
        which $GFORTRAN_BIN

    - name: Link gfortran (if needed)
      run: |
        # Check if gfortran is already available
        if ! command -v gfortran &> /dev/null; then
          # Find the installed gfortran binary (e.g., gfortran-13)
          GFORTRAN_BIN=$(find $(brew --prefix gcc)/bin -name 'gfortran-*' | head -n 1)
          if [ -n "$GFORTRAN_BIN" ]; then
            # Link to a user-writable directory in PATH
            mkdir -p ~/bin
            ln -sf "$GFORTRAN_BIN" ~/bin/gfortran
            echo "~/bin" >> $GITHUB_PATH
            echo "Linked $GFORTRAN_BIN to ~/bin/gfortran"
          else
            echo "Error: No gfortran binary found in $(brew --prefix gcc)/bin"
            exit 1
          fi
        fi
        # Verify
        which gfortran
        gfortran --version

    - name: Install MUMPS 5.7.3 (parallel + shared with mpicc/mpif90)
      run: |
        curl -L https://coin-or-tools.github.io/ThirdParty-Mumps/MUMPS_5.7.3.tar.gz -o MUMPS_5.7.3.tar.gz
        tar xzf MUMPS_5.7.3.tar.gz
        cd MUMPS_5.7.3
        cp Make.inc/Makefile.debian.PAR Makefile.inc

        # Remove SCOTCH if unused
        sed -i '' '/^SCOTCH/d' Makefile.inc
        sed -i '' '/^ISCOTCH/d' Makefile.inc
        sed -i '' '/^LSCOTCH/d' Makefile.inc

        # Use mpicc/mpif90 with gfortran
        echo "CC = mpicc" >> Makefile.inc
        echo "FC = mpif90" >> Makefile.inc
        echo "FL = mpif90" >> Makefile.inc
        # Optionally specify FORTRAN if needed
        # echo "FORTRAN = gfortran" >> Makefile.inc

        # Flags for Clang's OpenMP
        echo "CFLAGS = -Xpreprocessor -fopenmp -I${LIBOMP_DIR}/include -O -fPIC" >> Makefile.inc
        echo "LDFLAGS = -L${LIBOMP_DIR}/lib -lomp" >> Makefile.inc

        # Other libraries
        echo "LIBBLAS = -L${OPENBLAS_DIR}/lib -lopenblas" >> Makefile.inc
        echo "LIBMETIS = -L${METIS_DIR}/lib -lmetis" >> Makefile.inc
        echo "IMETIS = -I${METIS_DIR}/include" >> Makefile.inc
        echo "OPTF = -O2 -fallow-argument-mismatch" >> Makefile.inc
        echo "SONAMEOPT = " >> Makefile.inc

        # Build PORD library and additional object files
        if [ "./PORD/lib/" != "" ] ; then \
            cd ./PORD/lib/; \
            /Applications/Xcode_15.4.app/Contents/Developer/usr/bin/make PLAT="" FPIC="-fPIC" CC="mpicc" CFLAGS="-Xpreprocessor -fopenmp -I${LIBOMP_DIR}/include -O -fPIC" LDFLAGS="-L${LIBOMP_DIR}/lib -lomp" AR="ar vr " RANLIB="ranlib" OUTC="-o " LIBEXT=".a" LIBEXT_SHARED=".dylib" libpord.dylib; \
            cd ../..; \
        fi
        mpicc -I./include -Xpreprocessor -fopenmp -I${LIBOMP_DIR}/include -O -fPIC -c ./src/graph.c -o ./src/graph.o || true
        mpicc -I./include -Xpreprocessor -fopenmp -I${LIBOMP_DIR}/include -O -fPIC -c ./src/gbipart.c -o ./src/gbipart.o || true
        mpicc -I./include -Xpreprocessor -fopenmp -I${LIBOMP_DIR}/include -O -fPIC -c ./src/gbisect.c -o ./src/gbisect.o || true

        # Build MUMPS with verbose output
        make -j$(sysctl -n hw.ncpu) allshared V=1

        # Copy artifacts
        mkdir -p include lib
        cp include/*.h include/
        cp *.mod include/ || true
        cp lib/*.a lib/ || true
        cp lib/*.dylib lib/ || true
        cp libseq/libmpiseq.a lib/ || true

    - name: Install Python packages
      run: |
        python -m pip install --upgrade pip
        pip install numpy mpi4py cython pytest

    - name: Build mumps4py
      run: |
        export CC=mpicc
        export CFLAGS="-Xpreprocessor -fopenmp -I${{ env.MUMPS_INC }} -I${{ env.LIBOMP_DIR }}/include -O -fPIC"
        export LDFLAGS="-L${{ env.MUMPS_LIB }} -L${{ env.LIBOMP_DIR }}/lib -lomp"
        python setup.py build_ext --inplace --verbose
        pip install .

    - name: Run tests
      run: |
        python -c "import mumps4py; print(f'MUMPS4PY successfully imported from {mumps4py.__file__}')"
        mpiexec -n 2 pytest -v
